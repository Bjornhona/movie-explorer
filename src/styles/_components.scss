@use "sass:map";
@use "./variables" as *;

// Shared Component Styles

// Hero Section
.hero-section {
  background: $primary-gradient-overlay;
  padding: map.get($spacing, 16) map.get($spacing, 8) map.get($spacing, 12);
  text-align: center;
  position: relative;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="50" cy="50" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
    opacity: 0.3;
  }

  .hero-content {
    position: relative;
    z-index: 2;
    max-width: 800px;
    margin: 0 auto;

    h1 {
      font-size: map.get($font-sizes, 7xl);
      font-weight: map.get($font-weights, extrabold);
      color: map.get($colors, white);
      margin: 0 0 map.get($spacing, 4);
      text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
      letter-spacing: -0.02em;

      @include respond-to-max(md) {
        font-size: map.get($font-sizes, 5xl);
      }
    }

    .hero-subtitle {
      font-size: map.get($font-sizes, xl);
      color: rgba(255, 255, 255, 0.9);
      margin: 0;
      font-weight: map.get($font-weights, normal);
      line-height: map.get($line-heights, relaxed);
      max-width: 600px;
      margin: 0 auto;

      @include respond-to-max(md) {
        font-size: map.get($font-sizes, lg);
      }
    }
  }
}

// Main Content Container
.main-content {
  background: map.get($colors, gray-50);
  padding: map.get($spacing, 12) map.get($spacing, 8);
  min-height: calc(100vh - 200px);

  @include respond-to-max(md) {
    padding: map.get($spacing, 8) map.get($spacing, 4);
  }

  .content-wrapper {
    max-width: 1400px;
    margin: 0 auto;
  }
}

// Card Section
.card-section {
  margin-bottom: map.get($spacing, 16);
  background: map.get($colors, white);
  border-radius: map.get($border-radius, 2xl);
  box-shadow: map.get($shadows, md);
  overflow: hidden;
  transition: transform map.get($transitions, normal), box-shadow map.get($transitions, normal);

  &:hover {
    transform: translateY(-2px);
    box-shadow: map.get($shadows, lg);
  }

  .card-header {
    padding: map.get($spacing, 8) map.get($spacing, 8) map.get($spacing, 4);
    border-bottom: 1px solid map.get($colors, gray-200);
    background: $primary-gradient;
    color: map.get($colors, white);

    h2 {
      font-size: map.get($font-sizes, 3xl);
      font-weight: map.get($font-weights, bold);
      margin: 0;
      @include flex-center;
      gap: map.get($spacing, 3);

      .card-icon {
        width: 32px;
        height: 32px;
        @include flex-center;
        @include glass-effect;
        border-radius: map.get($border-radius, lg);
      }
    }

    .card-description {
      margin: map.get($spacing, 2) 0 0;
      opacity: 0.9;
      font-size: map.get($font-sizes, sm);
      font-weight: map.get($font-weights, normal);
    }
  }

  .card-content {
    padding: map.get($spacing, 6) map.get($spacing, 8) map.get($spacing, 8);
  }
}

// Grid Layout
.grid-container {
  display: flex;
  gap: map.get($spacing, 6);
  overflow-x: auto;
  padding: map.get($spacing, 2) 0;
  scroll-behavior: smooth;
  scrollbar-width: thin;
  scrollbar-color: map.get($colors, gray-300) map.get($colors, gray-100);

  &::-webkit-scrollbar {
    height: 6px;
  }

  &::-webkit-scrollbar-track {
    background: map.get($colors, gray-100);
    border-radius: 3px;
  }

  &::-webkit-scrollbar-thumb {
    background: map.get($colors, gray-300);
    border-radius: 3px;

    &:hover {
      background: map.get($colors, gray-400);
    }
  }
}

// Item Cards
.item-card {
  flex: 0 0 auto;
  width: 200px;
  border-radius: map.get($border-radius, xl);
  overflow: hidden;
  box-shadow: map.get($shadows, md);
  transition: all map.get($transitions, normal);
  cursor: pointer;
  background: map.get($colors, white);

  @include card-hover;

  .item-image {
    width: 100%;
    height: 300px;
    object-fit: cover;
    transition: transform map.get($transitions, normal);
  }

  .item-info {
    padding: map.get($spacing, 4);
    background: map.get($colors, white);

    .item-title {
      font-size: map.get($font-sizes, sm);
      font-weight: map.get($font-weights, semibold);
      color: map.get($colors, gray-800);
      margin: 0 0 map.get($spacing, 2);
      line-height: map.get($line-heights, tight);
      display: -webkit-box;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .item-meta {
      @include flex-center;
      gap: map.get($spacing, 1);
      font-size: map.get($font-sizes, xs);
      color: map.get($colors, gray-500);

      .star {
        color: map.get($colors, gold);
      }
    }
  }

  @include respond-to-max(lg) {
    width: 180px;
  }

  @include respond-to-max(md) {
    width: 160px;

    .item-image {
      height: 240px;
    }

    .item-info {
      padding: map.get($spacing, 3);

      .item-title {
        font-size: map.get($font-sizes, xs);
      }
    }
  }
}

// Loading States
.loading-state {
  @include flex-center;
  padding: map.get($spacing, 8);
  color: map.get($colors, gray-500);
  font-size: map.get($font-sizes, sm);
}

// Error States
.error-state {
  padding: map.get($spacing, 8);
  text-align: center;
  color: map.get($colors, error);
  background: #fef2f2;
  border-radius: map.get($border-radius, lg);
  margin: map.get($spacing, 4) 0;
}

// Empty States
.empty-state {
  text-align: center;
  padding: map.get($spacing, 4);
  color: map.get($colors, gray-500);
  font-size: map.get($font-sizes, sm);
  font-style: italic;
}

// Toast Container
.toast-container {
  position: fixed;
  top: map.get($spacing, 8);
  right: map.get($spacing, 8);
  z-index: map.get($z-index, dropdown);
  max-width: 400px;

  @include respond-to-max(md) {
    top: map.get($spacing, 4);
    right: map.get($spacing, 4);
    left: map.get($spacing, 4);
    max-width: none;
  }
}

// Buttons
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: map.get($spacing, 3) map.get($spacing, 6);
  font-size: map.get($font-sizes, base);
  font-weight: map.get($font-weights, medium);
  border-radius: map.get($border-radius, lg);
  border: none;
  cursor: pointer;
  transition: all map.get($transitions, normal);
  text-decoration: none;
  gap: map.get($spacing, 2);

  &-primary {
    background: $primary-gradient;
    color: map.get($colors, white);
    box-shadow: map.get($shadows, md);

    &:hover {
      transform: translateY(-1px);
      box-shadow: map.get($shadows, lg);
    }

    &:disabled {
      opacity: 0.6;
      cursor: not-allowed;
      transform: none;
    }
  }

  &-secondary {
    background: map.get($colors, gray-100);
    color: map.get($colors, gray-700);
    border: 1px solid map.get($colors, gray-200);

    &:hover {
      background: map.get($colors, gray-200);
    }
  }

  &-ghost {
    background: transparent;
    color: map.get($colors, gray-600);
    border: 1px solid map.get($colors, gray-200);

    &:hover {
      background: map.get($colors, gray-50);
    }
  }
}

// Animations
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.fade-in {
  animation: fadeIn 0.6s ease-out;
}

.slide-up {
  animation: slideUp 0.8s ease-out;
}

// Responsive Utilities
@include respond-to-max(lg) {
  .grid-container {
    gap: map.get($spacing, 4);
  }
}

@include respond-to-max(md) {
  .hero-section {
    padding: map.get($spacing, 12) map.get($spacing, 4) map.get($spacing, 8);
  }

  .card-section {
    margin-bottom: map.get($spacing, 8);

    .card-header {
      padding: map.get($spacing, 6) map.get($spacing, 6) map.get($spacing, 4);

      h2 {
        font-size: map.get($font-sizes, 2xl);
      }
    }

    .card-content {
      padding: map.get($spacing, 4) map.get($spacing, 6) map.get($spacing, 6);
    }
  }

  .grid-container {
    gap: map.get($spacing, 3);
  }
}