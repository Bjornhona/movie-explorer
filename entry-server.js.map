{"version":3,"file":"entry-server.js","sources":["../src/hooks/useMovies.ts","../src/components/MovieCard.tsx","../src/components/Card.tsx","../src/components/Loading.tsx","../src/functions.ts","../src/components/MovieCarousel.tsx","../src/components/icons/StarIcon.tsx","../src/components/icons/HeartIcon.tsx","../src/components/icons/BookmarkIcon.tsx","../src/constants.ts","../src/components/Toast.tsx","../src/pages/MoviesListPage.tsx","../src/hooks/useAuthentication.ts","../src/hooks/useMovieById.ts","../src/hooks/useWishlist.ts","../src/hooks/useAccountStates.ts","../src/components/Button.tsx","../src/components/Error.tsx","../src/pages/MovieDetailsPage.tsx","../src/pages/NotFoundPage.tsx","../src/hooks/useWishlistMovies.ts","../src/pages/WishlistPage.tsx","../src/components/NavBar.tsx","../src/components/Footer.tsx","../src/pages/LogoutPage.tsx","../src/App.tsx","../src/entry-server.tsx"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { Movie } from '../types.ts';\n\ninterface MoviesResponse {\n  results: Movie[];\n  page: number;\n  total_pages: number;\n  total_results: number;\n}\n\nexport const useMovies = (categoryId: string = 'upcoming') => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState<number | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchMovies = useCallback(async (pageToFetch = 1) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`/api/tmdb/movie/list?category=${categoryId}&page=${pageToFetch}`);\n      if (!response.ok) throw new Error('Failed to fetch movies');\n      const data: MoviesResponse = await response.json();\n      setMovies(prev => {\n        if (pageToFetch === 1) return data.results;\n        const existingIds = new Set(prev.map(m => m.id));\n        const newUnique = data.results.filter(m => !existingIds.has(m.id));\n        return [...prev, ...newUnique];\n      });\n      setPage(pageToFetch);\n      setTotalPages(data.total_pages);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  }, [categoryId]);\n\n  // Initial load\n  useEffect(() => {\n    setMovies([]); // Reset movies when categoryId changes\n    setPage(1);\n    setTotalPages(null);\n    fetchMovies(1);\n  }, [fetchMovies]);\n\n  const loadMore = () => {\n    const nextPage = page + 1;\n    if (totalPages && nextPage <= totalPages && !loading) {\n      fetchMovies(nextPage);\n    }\n  };\n\n  return { movies, loading, error, loadMore, hasMore: totalPages ? page < totalPages : true };\n}; ","import { forwardRef } from \"react\";\nimport { MovieCardProps } from \"../types.ts\";\nimport \"../styles/components/MovieCard.scss\";\n\nconst MovieCard = forwardRef<HTMLDivElement, MovieCardProps>(\n  ({ movie, onClick }, ref) => {\n    const fallbackImgPath = \"/fallback.png\";;\n    const imageUrl = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n    const pathname = window.location.pathname;\n    const isWishlist = pathname === \"/wishlist\";\n\n    return (\n      <div\n        data-testid={\"movie-card\"}\n        ref={ref}\n        className=\"item-card movie-card\"\n        onClick={() => onClick(movie.id)}\n      >\n        <img\n          src={imageUrl ?? fallbackImgPath}\n          alt={movie.title}\n          className=\"item-image movie-poster\"\n          loading=\"lazy\"\n          onError={(e) => {\n            (e.target as HTMLImageElement).src = fallbackImgPath;\n          }}\n        />\n        <div className=\"item-info\">\n          <h3 className=\"item-title movie-title\">{movie.title}</h3>\n          <div className=\"item-meta movie-rating\">\n            {!isWishlist && <span className=\"star\">★</span>}\n            {!isWishlist && <span>{movie.vote_average.toFixed(1)}</span>}\n            {isWishlist && (\n              <span>{new Date(movie.release_date).getFullYear()}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default MovieCard;\n","import { ReactNode } from 'react';\nimport '../styles/components/Card.scss';\n\ninterface CardProps {\n  icon?: string;\n  title?: string;\n  children?: ReactNode;\n}\n\nconst Card = ({icon, title, children}: CardProps) => {\n  return (\n    <section className=\"card-section fade-in\">\n      {(icon || title) && <div className=\"card-header\">\n        <h2>\n          {icon && <span className=\"card-icon\">{icon}</span>}\n          {title && title}\n        </h2>\n      </div>}\n      <div className=\"card-content\">\n        {children}\n      </div>\n    </section>\n  )\n}\n\nexport default Card;\n","import \"../styles/components/Loading.scss\";\nimport Card from \"./Card.tsx\";\n\ninterface LoadingProps {\n  type?: string;\n  spinnerText?: string;\n  loadingText?: string;\n}\n\nconst Loading = ({\n  type = \"loading-more\",\n  spinnerText,\n  loadingText,\n}: LoadingProps) => {\n  return (\n    <>\n      {type === \"loading-more\" && (\n        <div className={\"loading-component\"} data-testid={\"loading-more-component\"}>\n          Loading more movies...\n        </div>\n      )}\n      {type === \"loading-state\" && (\n        <div className=\"movie-details-loading\" data-testid={\"loading-state-component\"}>\n          <Card>\n            <div className=\"loading-spinner\">\n              <div>{spinnerText}</div>\n            </div>\n            <p className=\"loading-text\">{loadingText}</p>\n          </Card>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Loading;\n","export const handleMovieSelection = (movieId: number, categoryId: string) => {\n  window.history.pushState({}, \"\", `/${categoryId}/${movieId}`);\n  window.dispatchEvent(new PopStateEvent(\"popstate\"));\n};\n","import { useRef, useCallback } from \"react\";\nimport { useMovies } from \"../hooks/useMovies.ts\";\nimport { Movie } from \"../types.ts\";\nimport MovieCard from \"./MovieCard.tsx\";\nimport Loading from \"./Loading.tsx\";\nimport { handleMovieSelection } from \"../functions.ts\";\nimport \"../styles/components/MovieCarousel.scss\";\n\nconst MovieCarousel = ({ categoryId }: { categoryId: string }) => {\n  const { movies, loading, error, loadMore, hasMore } = useMovies(categoryId);\n  const observer = useRef<IntersectionObserver | null>(null);\n\n  // Attach observer to the last movie card, the node\n  const lastMovieRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      if (loading) return;\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver(\n        (entries) => {\n          if (entries[0].isIntersecting && hasMore && !loading) {\n            loadMore();\n          }\n        },\n        { root: null, rootMargin: \"0px\", threshold: 1.0 }\n      );\n      if (node) observer.current.observe(node);\n    },\n    [loading, hasMore, loadMore]\n  );\n\n  const handleCardClick = (movieId: number) => {\n    handleMovieSelection(movieId, categoryId);\n  };\n\n  return (\n    <div data-testid={`carousel-${categoryId}`}>\n      <div className=\"grid-container movies-grid\">\n        {movies.map((movie: Movie, idx: number) => {\n          const imageRef = idx === movies.length - 1 ? lastMovieRef : undefined;\n\n          return (\n            <MovieCard\n              key={movie.id}\n              movie={movie}\n              ref={imageRef}\n              onClick={handleCardClick}\n            />\n          );\n        })}\n        {loading && movies.length > 0 && (\n          <div className=\"loading-state\">\n            <Loading />\n          </div>\n        )}\n      </div>\n      {error && <div className=\"error-state\">Error: {error}</div>}\n      {!hasMore && movies.length > 0 && (\n        <div className=\"empty-state\">No more movies to load</div>\n      )}\n    </div>\n  );\n};\n\nexport default MovieCarousel;\n","import { IconProps } from \"../../types.ts\";\n\nconst StarIcon = ({color = 'none', border = 'white', size = 24, strokeWidth = 2}: IconProps) => {\n  return (\n    <svg\n      aria-label=\"star-icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill={color}\n      stroke={border}\n      strokeWidth={strokeWidth}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <polygon points=\"12 2 15 8.6 22 9.2 17 14 18.2 21 12 17.8 5.8 21 7 14 2 9.2 9 8.6 12 2\" />\n    </svg>\n  );\n}\n\nexport default StarIcon;\n","import { IconProps } from \"../../types.ts\";\n\nconst HeartIcon = ({color = 'none', border = 'white', size = 24, strokeWidth = 2}: IconProps) => {\n  return (\n    <svg\n      aria-label=\"heart-icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill={color}\n      stroke={border}\n      strokeWidth={strokeWidth}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M20.8 4.6c-1.6-1.4-4-1.4-5.6 0L12 7.2 8.8 4.6c-1.6-1.4-4-1.4-5.6 0-1.8 1.6-1.8 4.4 0 6l8.8 8.4 8.8-8.4c1.8-1.6 1.8-4.4 0-6z\" />\n    </svg>\n  );\n}\n\nexport default HeartIcon;\n","import { IconProps } from \"../../types.ts\";\n\nconst BookmarkIcon = ({ color = 'none', border = 'white', size = 24, strokeWidth = 2 }: IconProps) => {\n  return (\n    <svg\n      aria-label=\"bookmark-icon\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      fill={color}\n      stroke={border}\n      strokeWidth={strokeWidth}\n      strokeLinecap=\"round\"\n      strokeLinejoin=\"round\"\n    >\n      <path d=\"M6 3h12a1 1 0 0 1 1 1v17l-7-5-7 5V4a1 1 0 0 1 1-1z\" />\n    </svg>\n  );\n}\n\nexport default BookmarkIcon;\n","import { Category } from './types.ts';\nimport StarIcon from \"./components/icons/StarIcon.tsx\";\nimport HeartIcon from \"./components/icons/HeartIcon.tsx\";\nimport BookmarkIcon from \"./components/icons/BookmarkIcon.tsx\";\nimport { NavigationLink } from './types.ts';\n\nexport const BASE_URL = 'http://localhost:3000';\n\nexport const REQUEST_TOKEN_KEY = \"tmdb_request_token\";\nexport const SESSION_ID_KEY = \"tmdb_session_id\";\nexport const ACCOUNT_ID_KEY = \"tmdb_account_id\";\n\nexport const CATEGORIES: Category[] = [\n  {\n    id: 'upcoming',\n    name: 'Upcoming',\n    description: 'Coming soon to theaters near you',\n    icon: HeartIcon,\n    iconColor: 'hotpink'\n  },\n  {\n    id: 'popular',\n    name: 'Popular',\n    description: 'Trending movies everyone is talking about',\n    icon: StarIcon,\n    iconColor: 'gold'\n  },\n  {\n    id: 'top_rated',\n    name: 'Top Rated',\n    description: 'Critically acclaimed masterpieces',\n    icon: BookmarkIcon,\n    iconColor: 'aquamarine'\n  }\n];\n\nexport const NAVIGATION_LINKS: NavigationLink[] = [\n  {\n    name: \"Movies\",\n    route: \"/\",\n  },\n  {\n    name: \"My Wishlist\",\n    route: \"/wishlist\",\n  },\n];\n","import React, { useEffect } from \"react\";\nimport '../styles/components/Toast.scss';\n\ninterface ToastProps {\n  message: string;\n  color?: 'green' | 'red';\n  duration?: number;\n  onClose?: () => void;\n}\n\nconst Toast: React.FC<ToastProps> = ({ message, color = 'green', duration = 2500, onClose }) => {\n  useEffect(() => {\n    if (!onClose) return;\n    const timeout = setTimeout(() => onClose(), duration);\n    return () => clearTimeout(timeout);\n  }, [onClose, duration]);\n\n  return (\n    <div\n      aria-label=\"toast-message\"\n      className={`toast-message ${color}`}\n    >\n      {message}\n    </div>\n  );\n};\n\nexport default Toast; ","import { useEffect, useState } from \"react\";\nimport MovieCarousel from \"../components/MovieCarousel.tsx\";\nimport { CATEGORIES } from \"../constants.ts\";\nimport Toast from \"../components/Toast.tsx\";\nimport \"../styles/pages/MoviesListPage.scss\";\n\nconst MoviesListPage = () => {\n  const [showLogoutToast, setShowLogoutToast] = useState(false);\n\n  useEffect(() => {\n    if (localStorage.getItem(\"logoutSuccess\")) {\n      setShowLogoutToast(true);\n      localStorage.removeItem(\"logoutSuccess\");\n    }\n  }, []);\n\n  return (\n    <div className=\"movies-list-page\">\n      {/* Hero Section */}\n      <section className=\"hero-section\">\n        <div className=\"hero-content\">\n          <h1>Discover Amazing Movies</h1>\n          <p className=\"hero-subtitle\">\n            Explore the latest releases, popular hits, and top-rated films from around the world\n          </p>\n        </div>\n      </section>\n\n      {/* Main Content */}\n      <main className=\"main-content\">\n        <div className=\"content-wrapper\">\n          {CATEGORIES.map((category, index) => (\n            <section \n              key={category.id} \n              className=\"card-section fade-in\"\n              style={{ animationDelay: `${index * 0.1}s` }}\n            >\n              <div className=\"card-header\">\n                <h2>\n                  <span className=\"card-icon\">\n                    <category.icon size={20} color=\"white\" />\n                  </span>\n                  {category.name}\n                </h2>\n                <p className=\"card-description\">\n                  {category.id === 'upcoming' && 'Coming soon to theaters near you'}\n                  {category.id === 'popular' && 'Trending movies everyone is talking about'}\n                  {category.id === 'top_rated' && 'Critically acclaimed masterpieces'}\n                </p>\n              </div>\n              <div className=\"card-content\">\n                <MovieCarousel\n                  categoryId={category.id}\n                />\n              </div>\n            </section>\n          ))}\n        </div>\n      </main>\n\n      {/* Toast Notifications */}\n      {showLogoutToast && (\n        <div className=\"toast-container\">\n          <Toast \n            message=\"Logout successful!\" \n            color=\"green\" \n            onClose={() => setShowLogoutToast(false)} \n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MoviesListPage;\n","import { useState, useEffect } from \"react\";\nimport { REQUEST_TOKEN_KEY, SESSION_ID_KEY, ACCOUNT_ID_KEY } from \"../constants.ts\";\n\nexport const useAuthentication = () => {\n  const [sessionId, setSessionId] = useState<string | null>(null);\n  const [accountId, setAccountId] = useState<string | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  // Check if any previous sessionId or AccountId\n  useEffect(() => {\n    const getStoredSessionId = () => localStorage.getItem(SESSION_ID_KEY);\n    const storedSessionId = getStoredSessionId();\n    storedSessionId && setSessionId(storedSessionId);\n  }, []);\n\n  useEffect(() => {\n    const getStoredAccountId = () => localStorage.getItem(ACCOUNT_ID_KEY);\n    const storedAccountId = getStoredAccountId();\n    storedAccountId && setAccountId(storedAccountId);\n  }, []);\n\n  // Get request token\n  const getRequestToken = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const res = await fetch(\"/api/tmdb/authentication/token/new\");\n      const data = await res.json();\n      if (data.success && data.request_token) {\n        localStorage.setItem(REQUEST_TOKEN_KEY, data.request_token);\n        return data.request_token;\n      } else {\n        throw new Error(\"Failed to get request token\");\n      }\n    } catch (err) {\n      setError((err as Error).message);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Redirect user to TMDB approval page\n  const redirectToTmdbApproval = (requestToken: string, redirectUrl: string) => {\n    window.location.href = `https://www.themoviedb.org/authenticate/${requestToken}?redirect_to=${encodeURIComponent(redirectUrl)}`;\n  };\n\n  // Exchange request token for session ID\n  const createSession = async (requestToken: string) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const res = await fetch(\"/api/tmdb/session\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ request_token: requestToken }),\n      });\n      const data = await res.json();\n      if (data.success && data.session_id) {\n        setSessionId(data.session_id);\n        localStorage.setItem(SESSION_ID_KEY, data.session_id);\n        return data.session_id;\n      } else {\n        throw new Error(\"Failed to create session\");\n      }\n    } catch (err) {\n      setError((err as Error).message);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Get account ID\n  const fetchAccountId = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const res = await fetch(\"/api/tmdb/account\");\n      const data = await res.json();\n      if (data.id) {\n        setAccountId(data.id);\n        localStorage.setItem(ACCOUNT_ID_KEY, data.id);\n        return data.id;\n      } else {\n        throw new Error(\"Failed to get account ID\");\n      }\n    } catch (err) {\n      setError((err as Error).message);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle redirect back from TMDB\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const approved = urlParams.get(\"approved\");\n    const requestToken = urlParams.get(\"request_token\") || localStorage.getItem(REQUEST_TOKEN_KEY);\n\n    if (approved === \"true\" && requestToken && !sessionId) {\n      (async () => {\n        const newSessionId = await createSession(requestToken);\n        if (newSessionId) {\n          await fetchAccountId();\n        }\n      })();\n    }\n  }, []);\n\n  // Logout/clear\n  const logout = () => {\n    setSessionId(null);\n    setAccountId(null);\n    localStorage.removeItem(SESSION_ID_KEY);\n    localStorage.removeItem(ACCOUNT_ID_KEY);\n    localStorage.removeItem(REQUEST_TOKEN_KEY);\n  };\n\n  return {\n    sessionId,\n    accountId,\n    loading,\n    error,\n    getRequestToken,\n    redirectToTmdbApproval,\n    logout,\n    createSession,\n    fetchAccountId\n  };\n};\n","import { useState, useEffect } from 'react';\nimport { Movie } from '../types.ts';\n\nexport const useMovieById = (movieId: string) => {\n  const [movieById, setMovieById] = useState<Movie | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const getMovieById = async (id: string, language: string = 'en-US') => {\n    setLoading(true);\n    setError(null);\n    setMovieById(null);\n    try {\n      const response = await fetch(`/api/tmdb/movie/${id}?language=${language}`);\n      if (!response.ok) {\n        throw new Error('Failed to fetch movie details');\n      }\n      const data = await response.json();\n      setMovieById(data);\n      return data;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error';\n      setError(errorMessage);\n      setMovieById(null);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    getMovieById(movieId);\n  }, [movieId]);\n\n  return { movieById, loading, error, getMovieById };\n}; ","import { useState } from 'react';\n\ninterface AddToWishlistParams {\n  accountId: string;\n  sessionId: string;\n  movieId: string;\n  addToWishlist?: boolean;\n}\n\nexport const useWishlist = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<boolean | null>(null);\n\n  const addToWishlist = async ({ accountId, sessionId, movieId, addToWishlist = true }: AddToWishlistParams) => {\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n    try {\n      const res = await fetch(\"/api/tmdb/wishlist\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          accountId,\n          sessionId,\n          movieId,\n          addToWishlist,\n        }),\n      });\n      if (!res.ok) {\n        const data = await res.json();\n        setError(data.error || 'Failed to update wishlist');\n        setSuccess(false);\n        return;\n      }\n      setSuccess(true);\n    } catch (err) {\n      setError((err as Error).message);\n      setSuccess(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { addToWishlist, loading, error, success };\n};\n","import { useState } from \"react\";\n\ninterface CheckWishlistParams {\n  movieId: string;\n  sessionId: string;\n}\n\nexport const useAccountStates = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<boolean | null>(null);\n\n  const isMovieInWishlist = async ({\n    movieId,\n    sessionId,\n  }: CheckWishlistParams): Promise<boolean> => {\n    setLoading(true);\n    setError(null);\n    setSuccess(null);\n\n    if (!sessionId) {\n      return false;\n    }\n\n    try {\n      const res = await fetch(\n        `/api/tmdb/account_states?movieId=${movieId}&session_id=${sessionId}`,\n        {\n          method: \"GET\",\n          headers: { \"Content-Type\": \"application/json\" },\n        }\n      );\n\n      if (!res.ok) {\n        console.error(\"Failed to check wishlist status\");\n        return false;\n      }\n\n      const data = await res.json();\n      return data.watchlist || false;\n    } catch (err) {\n      console.error(\"Error checking wishlist status:\", err);\n      setError((err as Error).message);\n      setSuccess(false);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return { isMovieInWishlist, loading, error, success };\n};\n","import '../styles/components/Button.scss';\n\ninterface ButtonProps {\n  onClick: () => void;\n  disabled?: boolean;\n  text?: string;\n  type?: 'primary' | 'secondary';\n}\n\nconst Button = ({onClick, disabled = false, text = 'OK', type = 'primary'}: ButtonProps) => {\n  return (\n    <button\n      className={`button ${type && type}`}\n      onClick={onClick}\n      disabled={disabled}\n    >\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n","import Card from \"./Card.tsx\";\nimport Button from \"./Button.tsx\";\n\ninterface ErrorProps {\n  icon?: string;\n  title?: string;\n  error?: string;\n  buttonText?: string;\n  buttonOnClick?: () => void;\n  buttonType?: \"primary\" | \"secondary\";\n}\n\nconst Error = ({\n  icon = '⚠️',\n  title = 'Error',\n  error = 'An error has occured',\n  buttonText = 'OK',\n  buttonOnClick,\n  buttonType = 'primary',\n}: ErrorProps) => {\n  return (\n    <Card icon={icon} title={title}>\n      <p className=\"error-description\">{error}</p>\n      {buttonOnClick && <Button\n        text={buttonText}\n        onClick={buttonOnClick}\n        type={buttonType}\n      />}\n    </Card>\n  );\n};\n\nexport default Error;\n","import { useState, useEffect, useMemo } from \"react\";\nimport { useAuthentication } from \"../hooks/useAuthentication.ts\";\nimport { useMovieById } from \"../hooks/useMovieById.ts\";\nimport { useWishlist } from \"../hooks/useWishlist.ts\";\nimport Toast from \"../components/Toast.tsx\";\nimport { CATEGORIES } from \"../constants.ts\";\nimport { Category } from \"../types.ts\";\nimport { useAccountStates } from \"../hooks/useAccountStates.ts\";\nimport \"../styles/pages/MovieDetailsPage.scss\";\nimport Card from \"../components/Card.tsx\";\nimport Loading from \"../components/Loading.tsx\";\nimport Error from \"../components/Error.tsx\";\n\ninterface MovieDetailsPageProps {\n  movieId: string;\n  categoryId: string;\n}\n\nconst MovieDetailsPage = ({ movieId, categoryId }: MovieDetailsPageProps) => {\n  const {\n    movieById,\n    loading: movieLoading,\n    error: movieError,\n  } = useMovieById(movieId);\n\n  const {\n    sessionId,\n    accountId,\n    loading: authLoading,\n    error: authError,\n    getRequestToken,\n    redirectToTmdbApproval,\n  } = useAuthentication();\n\n  const {\n    addToWishlist,\n    loading: wishlistLoading,\n    error: wishlistError,\n    success: wishlistSuccess,\n  } = useWishlist();\n\n  const { isMovieInWishlist, loading: accountStatesLoading } =\n    useAccountStates();\n\n  const [showWishlistToast, setShowWishlistToast] = useState(false);\n  const [showAuthToast, setShowAuthToast] = useState(false);\n  const [isInWishlist, setIsInWishlist] = useState(false);\n\n  useEffect(() => {\n    const checkWishlistStatus = async () => {\n      if (!sessionId || !movieId) {\n        setIsInWishlist(false);\n        return;\n      }\n      try {\n        const inWishlist = await isMovieInWishlist({ movieId, sessionId });\n        setIsInWishlist(inWishlist);\n      } catch (error) {\n        console.error(\"Error checking wishlist status:\", error);\n        setIsInWishlist(false);\n      }\n    };\n    checkWishlistStatus();\n  }, [movieId, sessionId]);\n\n  useEffect(() => {\n    if (wishlistSuccess) {\n      setShowWishlistToast(true);\n      const timeout = setTimeout(() => setShowWishlistToast(false), 2500);\n      return () => clearTimeout(timeout);\n    }\n  }, [wishlistSuccess]);\n\n  useEffect(() => {\n    if (wishlistError) {\n      setShowWishlistToast(true);\n      const timeout = setTimeout(() => setShowWishlistToast(false), 2500);\n      return () => clearTimeout(timeout);\n    }\n  }, [wishlistError]);\n\n  useEffect(() => {\n    if (authError) {\n      setShowAuthToast(true);\n      const timeout = setTimeout(() => setShowAuthToast(false), 2500);\n      return () => clearTimeout(timeout);\n    }\n  }, [authError]);\n\n  const currentCategory = useMemo(() => {\n    return (\n      CATEGORIES.find((c: Category) => c.id === categoryId) || CATEGORIES[0]\n    );\n  }, [categoryId]);\n\n  const handleLogin = async () => {\n    const requestToken = await getRequestToken();\n    if (requestToken) {\n      const redirectUrl =\n        window.location.origin +\n        window.location.pathname +\n        window.location.search;\n      redirectToTmdbApproval(requestToken, redirectUrl);\n    }\n  };\n\n  const handleWishlistToggle = async () => {\n    if (!accountId || !sessionId) return;\n    await addToWishlist({\n      accountId,\n      sessionId,\n      movieId,\n      addToWishlist: !isInWishlist,\n    });\n    setIsInWishlist(!isInWishlist);\n  };\n\n  if (movieLoading) {\n    return (\n      <Loading\n        type={\"loading-state\"}\n        spinnerText={\"Loading movie details...\"}\n        loadingText={\"Please wait while we fetch the movie information\"}\n      />\n    );\n  }\n\n  if (movieError)\n    <Error\n      icon={\"⚠️\"}\n      title={\"Error Loading Movie\"}\n      error={movieError}\n      buttonText={\"Try Again\"}\n      buttonOnClick={() => window.location.reload()}\n    />;\n\n  if (!movieById)\n    <Error\n      icon={\"🔍\"}\n      title={\"Movie Not Found\"}\n      error={\"The movie you're looking for doesn't exist or has been removed.\"}\n      buttonText={\"Go Back\"}\n      buttonOnClick={() => window.history.back()}\n    />;\n\n  const backdropUrl =\n    movieById &&\n    `https://image.tmdb.org/t/p/original${movieById.backdrop_path}`;\n  const posterUrl =\n    movieById && `https://image.tmdb.org/t/p/w500${movieById.poster_path}`;\n  const Icon = currentCategory.icon;\n\n  const movieDetailsListItem = [\n    {\n      label: \"Title\",\n      value: movieById ? movieById.title : \"\",\n    },\n    {\n      label: \"Release Date\",\n      value: movieById\n        ? new Date(movieById.release_date).toLocaleDateString()\n        : \"\",\n    },\n    {\n      label: \"Category\",\n      value: currentCategory.name,\n    },\n  ];\n\n  const heroBackdropImage = backdropUrl\n    ? { backgroundImage: `url(${backdropUrl})` }\n    : { backgroundColor: \"#64748b\" };\n\n  return (\n    <div className=\"movie-details-page\">\n      {/* Hero Section */}\n      {movieById && (\n        <section className=\"movie-hero\">\n          <div className=\"hero-backdrop\" style={heroBackdropImage} />\n          <div className=\"hero-content\">\n            <div className=\"movie-header\">\n              <div className=\"movie-poster\">\n                {posterUrl ? (\n                  <img src={posterUrl} alt={movieById.title} loading=\"lazy\" />\n                ) : (\n                  <div className={\"no-poster-image\"} />\n                )}\n              </div>\n              <div className=\"movie-info\">\n                <h1 className={`movie-title ${currentCategory.id}`}>\n                  {movieById.title}\n                </h1>\n                {movieById.tagline && (\n                  <p className=\"movie-tagline\">\"{movieById.tagline}\"</p>\n                )}\n                <div className=\"movie-meta\">\n                  <div className=\"meta-item\">\n                    <span className=\"meta-icon\">📅</span>\n                    <span>\n                      {new Date(movieById.release_date).getFullYear()}\n                    </span>\n                  </div>\n                  <div className=\"meta-item\">\n                    <span className=\"meta-icon\">🎬</span>\n                    <span>{currentCategory.name}</span>\n                  </div>\n                </div>\n                <div className=\"movie-actions\">\n                  <button\n                    className=\"wishlist-button\"\n                    aria-label={\n                      isInWishlist ? \"Remove from wishlist\" : \"Add to wishlist\"\n                    }\n                    onClick={\n                      !sessionId || !accountId\n                        ? handleLogin\n                        : handleWishlistToggle\n                    }\n                    disabled={\n                      authLoading || wishlistLoading || accountStatesLoading\n                    }\n                  >\n                    <Icon\n                      size={24}\n                      color={isInWishlist ? currentCategory.iconColor : \"none\"}\n                      border={isInWishlist ? \"none\" : \"white\"}\n                    />\n                    {isInWishlist ? \"Remove from Wishlist\" : \"Add to Wishlist\"}\n                  </button>\n                  {movieById.homepage && (\n                    <a\n                      href={movieById.homepage}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"homepage-button\"\n                    >\n                      <span className=\"meta-icon\">🌐</span>\n                      Visit Homepage\n                    </a>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Main Content */}\n      {movieById && (\n        <main\n          data-testid={\"movie-details-content\"}\n          className={`movie-content bg-${currentCategory.id}`}\n        >\n          <div className=\"content-wrapper\">\n            <div className=\"main-section\">\n              {/* Overview Section */}\n              <Card icon={\"📖\"} title={\"Overview\"}>\n                <p className=\"overview-text\">{movieById.overview}</p>\n              </Card>\n\n              {/* Category Section */}\n              <Card icon={\"🎭\"} title={\"Category\"}>\n                <div className=\"category-info\">\n                  <div className=\"category-icon\">\n                    <Icon size={24} color=\"white\" />\n                  </div>\n                  <div className=\"category-details\">\n                    <h3 className=\"category-name\">{currentCategory.name}</h3>\n                    <p className=\"category-description\">\n                      {currentCategory.description}\n                    </p>\n                  </div>\n                </div>\n              </Card>\n            </div>\n\n            <div className=\"sidebar\">\n              {/* Movie Details Side-section */}\n              <Card icon={\"ℹ️\"} title={\"Movie Details\"}>\n                <ul className=\"details-list\">\n                  {movieDetailsListItem.map((item, index) => (\n                    <li key={index} className=\"detail-item\">\n                      <span className=\"detail-label\">{item.label}</span>\n                      <span className=\"detail-value\">{item.value}</span>\n                    </li>\n                  ))}\n                  {movieById.homepage && (\n                    <li className=\"detail-item\">\n                      <span className=\"detail-label\">Homepage</span>\n                      <span className=\"detail-value\">\n                        <a\n                          href={movieById.homepage}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          style={{\n                            color: \"inherit\",\n                            textDecoration: \"underline\",\n                          }}\n                        >\n                          Visit\n                        </a>\n                      </span>\n                    </li>\n                  )}\n                </ul>\n              </Card>\n            </div>\n          </div>\n        </main>\n      )}\n\n      {showWishlistToast && (\n        <div className=\"toast-container\">\n          {wishlistSuccess ? (\n            <Toast\n              message={\n                isInWishlist\n                  ? \"Movie added to wishlist!\"\n                  : \"Movie removed from wishlist!\"\n              }\n              color=\"green\"\n              onClose={() => setShowWishlistToast(false)}\n            />\n          ) : wishlistError ? (\n            <Toast\n              message={`Failed to update wishlist: ${wishlistError}`}\n              color=\"red\"\n              onClose={() => setShowWishlistToast(false)}\n            />\n          ) : null}\n        </div>\n      )}\n      {showAuthToast && authError && (\n        <div className=\"toast-container\">\n          <Toast\n            message={`Auth error: ${authError}`}\n            color=\"red\"\n            onClose={() => setShowAuthToast(false)}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MovieDetailsPage;\n","import '../styles/pages/NotFoundPage.scss';\n\nconst NotFoundPage = () => {\n  return (\n    <h1>404 - Page Not Found</h1>\n  )\n}\n\nexport default NotFoundPage;\n","import { useState, useCallback, useEffect } from 'react';\nimport { Movie } from '../types.ts';\n\ninterface MoviesResponse {\n  results: Movie[];\n  page: number;\n  total_pages: number;\n  total_results: number;\n}\n\nexport const useWishlistMovies = (accountId: string | null, sessionId: string | null, reloadKey: number = 0) => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState<number | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchMovies = useCallback(async (pageToFetch = 1) => {\n    if (!accountId || !sessionId) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`/api/tmdb/wishlist?accountId=${accountId}&sessionId=${sessionId}&page=${pageToFetch}`);\n      if (!response.ok) throw new Error('Failed to fetch wishlist movies');\n      const data: MoviesResponse = await response.json();\n      setMovies(prev => {\n        if (pageToFetch === 1) return data.results;\n        const existingIds = new Set(prev.map(m => m.id));\n        const newUnique = data.results.filter(m => !existingIds.has(m.id));\n        return [...prev, ...newUnique];\n      });\n      setPage(data.page);\n      setTotalPages(data.total_pages);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  }, [accountId, sessionId]);\n\n  useEffect(() => {\n    setMovies([]);\n    setPage(1);\n    setTotalPages(null);\n    fetchMovies(1);\n  }, [fetchMovies, reloadKey]);\n\n  const loadMore = () => {\n    if (totalPages && page < totalPages && !loading) {\n      fetchMovies(page + 1);\n    }\n  };\n\n  return { movies, loading, error, loadMore, hasMore: totalPages ? page < totalPages : true };\n}; ","import { useRef, useCallback } from \"react\";\nimport Button from \"../components/Button.tsx\";\nimport Card from \"../components/Card.tsx\";\nimport { useAuthentication } from \"../hooks/useAuthentication.ts\";\nimport { useWishlistMovies } from \"../hooks/useWishlistMovies.ts\";\nimport { handleMovieSelection } from \"../functions.ts\";\nimport MovieCard from \"../components/MovieCard.tsx\";\nimport { Movie } from \"../types.ts\";\nimport \"../styles/pages/WishlistPage.scss\";\nimport Loading from \"../components/Loading.tsx\";\nimport Error from \"../components/Error.tsx\";\n\nconst WishlistedMoviePage = () => {\n  const {\n    loading: authLoading,\n    accountId,\n    sessionId,\n    getRequestToken,\n    redirectToTmdbApproval,\n  } = useAuthentication();\n\n  const { movies, error, loading, loadMore, hasMore } = useWishlistMovies(\n    accountId,\n    sessionId\n  );\n\n  const observer = useRef<IntersectionObserver | null>(null);\n\n  const handleGetNewToken = async () => {\n    const requestToken = await getRequestToken();\n    if (requestToken) {\n      const redirectUrl =\n        window.location.origin +\n        window.location.pathname +\n        window.location.search;\n      redirectToTmdbApproval(requestToken, redirectUrl);\n    }\n  };\n\n  const lastMovieRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      if (loading) return;\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver(\n        (entries) => {\n          if (entries[0].isIntersecting && hasMore && !loading) {\n            loadMore();\n          }\n        },\n        { root: null, rootMargin: \"0px\", threshold: 1.0 }\n      );\n      if (node) observer.current.observe(node);\n    },\n    [loading, hasMore, loadMore]\n  );\n\n  const handleCardClick = (movieId: number) => {\n    handleMovieSelection(movieId, \"popular\");\n  };\n\n  return (\n    <div className=\"wishlist-page\">\n      <section className=\"hero-section\">\n        <div className=\"hero-content\">\n          <h1>My Wishlist</h1>\n          <p className=\"hero-subtitle\">\n            Your personal collection of movies you want to watch\n          </p>\n        </div>\n      </section>\n\n      <main className=\"main-content\">\n        <div className=\"content-wrapper\">\n\n          {/* Authentication Required */}\n          {!sessionId && !accountId && (\n            <Card icon={\"🔐\"} title={\"Authentication Required\"}>\n              <p className=\"auth-message\">\n                To view your wishlist, you need to be logged in with your TMDB\n                account.\n              </p>\n              <Button\n                text={authLoading ? \"Connecting...\" : \"Login with TMDB\"}\n                disabled={authLoading}\n                onClick={handleGetNewToken}\n              />\n            </Card>\n          )}\n\n          {authLoading && (\n            <Loading\n              type={\"loading-state\"}\n              spinnerText={\"Loading authentication...\"}\n              loadingText={\"Please wait while we connect to TMDB\"}\n            />\n          )}\n\n          {error && (\n            <Error\n              icon={\"⚠️\"}\n              title={\"Error Loading Wishlist\"}\n              error={`Error: ${error}`}\n              buttonText={\"Try Again\"}\n              buttonOnClick={handleGetNewToken}\n              buttonType={'secondary'}\n            />\n          )}\n\n          {sessionId && accountId && (\n            <Card title={\"My Wishlist\"} icon={\"❤️\"}>\n\n              {/* Empty Wishlist */}\n              {movies.length === 0 && !loading && (\n                <div className=\"empty-wishlist\">\n                  <div className=\"card-content\">\n                    <div className=\"empty-icon\">📽️</div>\n                    <h3 className=\"empty-title\">Your wishlist is empty</h3>\n                    <p className=\"empty-description\">\n                      Start building your collection by browsing movies and\n                      adding them to your wishlist.\n                    </p>\n                    <button\n                      className=\"browse-button\"\n                      onClick={() => (window.location.href = \"/\")}\n                    >\n                      Browse Movies\n                    </button>\n                  </div>\n                </div>\n              )}\n\n              {movies.length > 0 && (\n                <div className=\"grid-container wishlist-grid\">\n                  {movies.map((movie: Movie, idx: number) => {\n                    const movieRef =\n                      idx === movies.length - 1 ? lastMovieRef : undefined;\n                    return (\n                      <MovieCard\n                        key={movie.id}\n                        movie={movie}\n                        ref={movieRef}\n                        onClick={handleCardClick}\n                      />\n                    );\n                  })}\n                  {loading && (\n                    <div className=\"loading-state\">\n                      <div>Loading more movies...</div>\n                    </div>\n                  )}\n                </div>\n              )}\n            </Card>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default WishlistedMoviePage;\n","import { useState, useEffect } from \"react\";\nimport { NAVIGATION_LINKS } from \"../constants.ts\";\nimport { NavigationLink } from \"../types.ts\";\nimport \"../styles/components/NavBar.scss\";\n\nconst NavBar = () => {\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [currentPath, setCurrentPath] = useState(\"/\");\n  const [isClient, setIsClient] = useState(false);\n\n  // Initialize client-side state\n  useEffect(() => {\n    setIsClient(true);\n    setCurrentPath(window.location.pathname);\n  }, []);\n\n  // Handle scroll effect\n  useEffect(() => {\n    if (!isClient) return;\n\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 10);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [isClient]);\n\n  // Handle path changes\n  useEffect(() => {\n    if (!isClient) return;\n\n    const handlePopState = () => {\n      setCurrentPath(window.location.pathname);\n    };\n\n    window.addEventListener(\"popstate\", handlePopState);\n    return () => window.removeEventListener(\"popstate\", handlePopState);\n  }, [isClient]);\n\n  const handleNav = (path: string) => {\n    if (!isClient) return;\n\n    window.history.pushState({}, \"\", path);\n    window.dispatchEvent(new PopStateEvent(\"popstate\"));\n    setCurrentPath(path);\n  };\n\n  const getNavIcon = (route: string) => {\n    switch (route) {\n      case \"/\":\n        return \"🎬\";\n      case \"/wishlist\":\n        return \"❤️\";\n      default:\n        return \"📱\";\n    }\n  };\n\n  return (\n    <nav className={`navbar ${isScrolled ? \"scrolled\" : \"\"}`}>\n      <div className=\"navbar-container\">\n        <div className=\"navbar-brand\" onClick={() => handleNav(\"/\")}>\n          <div className=\"brand-logo\">🎬</div>\n          <span className=\"brand-text\">MovieExplorer</span>\n        </div>\n\n        <ul className=\"navbar-nav\">\n          {NAVIGATION_LINKS.map((navLink: NavigationLink, index: number) => (\n            <li key={index} className=\"nav-item\">\n              <div\n                className={`nav-link ${\n                  currentPath === navLink.route ? \"active\" : \"\"\n                }`}\n                onClick={() => handleNav(navLink.route)}\n              >\n                <span className=\"nav-icon\">{getNavIcon(navLink.route)}</span>\n                <span className=\"nav-text\">{navLink.name}</span>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","import \"../styles/components/Footer.scss\";\n\nconst Footer = () => {\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <footer className=\"footer\">\n      <div className=\"footer-container\">\n        <div className=\"footer-content\">\n          {/* Brand Section */}\n          <div className=\"footer-brand\">\n            <div className=\"brand-logo\">\n              🎬\n            </div>\n            <div className=\"brand-info\">\n              <h3 className=\"brand-name\">MovieExplorer</h3>\n              <p className=\"brand-tagline\">Discover your next favorite movie</p>\n            </div>\n          </div>\n\n          {/* Links Section */}\n          <div className=\"footer-links\">\n            <div className=\"footer-section\">\n              <h4 className=\"section-title\">Navigation</h4>\n              <ul className=\"link-list\">\n                <li><a href=\"/\" className=\"footer-link\">Movies</a></li>\n                <li><a href=\"/wishlist\" className=\"footer-link\">My Wishlist</a></li>\n              </ul>\n            </div>\n          </div>\n        </div>\n\n        {/* Bottom Section */}\n        <div className=\"footer-bottom\">\n          <div className=\"footer-info\">\n            <p className=\"copyright\">\n              © {currentYear} MovieExplorer. All rights reserved.\n            </p>\n            <p className=\"powered-by\">\n              Powered by TMDB API\n            </p>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;","import { useEffect, useState } from \"react\";\nimport { useAuthentication } from \"../hooks/useAuthentication.ts\";\nimport \"../styles/pages/LogoutPage.scss\";\nimport Toast from \"../components/Toast.tsx\";\nimport Card from \"../components/Card.tsx\";\nimport Button from \"../components/Button.tsx\";\n\nconst LogoutPage = () => {\n  const { accountId, logout } = useAuthentication();\n  const [showToast, setShowToast] = useState(false);\n\n  useEffect(() => {\n    if (!accountId) {\n      window.history.pushState({}, \"\", \"/\");\n      window.dispatchEvent(new PopStateEvent(\"popstate\"));\n    }\n  }, [accountId]);\n\n  const handleLogout = () => {\n    logout();\n    setShowToast(true);\n    localStorage.setItem(\"logoutSuccess\", \"1\");\n    setTimeout(() => {\n      window.history.pushState({}, \"\", \"/\");\n      window.dispatchEvent(new PopStateEvent(\"popstate\"));\n    }, 1000);\n  };\n\n  return (\n    <div className=\"logout-component\">\n      <Card icon={\"🔐\"} title={\"Log out\"}>\n        <p className=\"auth-message\">\n          If you log out you will not be able to see your wishlist. You can login again at any moment by just navigating to My Wishlist.\n        </p>\n        <Button text={\"Logout\"} onClick={handleLogout} />\n      </Card>\n      {showToast && (\n        <Toast\n          message=\"Logout successful!\"\n          color=\"green\"\n          onClose={() => setShowToast(false)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default LogoutPage;\n","import { useState, useEffect, FC } from \"react\";\nimport \"./styles/main.scss\";\nimport MoviesListPage from \"./pages/MoviesListPage.tsx\";\nimport MovieDetailsPage from \"./pages/MovieDetailsPage.tsx\";\nimport NotFoundPage from \"./pages/NotFoundPage.tsx\";\nimport WishlistedMoviePage from \"./pages/WishlistPage.tsx\";\nimport NavBar from \"./components/NavBar.tsx\";\nimport Footer from \"./components/Footer.tsx\";\nimport LogoutPage from \"./pages/LogoutPage.tsx\";\n\ninterface AppProps {\n  initialUrl: string;\n  initialMovie?: any;\n}\n\nconst App: FC<AppProps> = ({ initialUrl, initialMovie }) => {\n  const [url, setUrl] = useState<string>(initialUrl);\n\n  useEffect(() => {\n    const onPopState = () => {\n      const newUrl = window.location.pathname + window.location.search;\n      setUrl(newUrl);\n    };\n    window.addEventListener(\"popstate\", onPopState);\n    return () => window.removeEventListener(\"popstate\", onPopState);\n  }, [initialUrl]);\n\n  const pathname = new URL(url, \"http://localhost\").pathname;\n\n  return (\n    <>\n      <NavBar />\n      {pathname === \"/\" && <MoviesListPage />}\n      {pathname === \"/wishlist\" && <WishlistedMoviePage />}\n      {pathname === \"/logout\" && <LogoutPage />}\n      {/^\\/([^/]+)\\/(\\d+)$/.test(pathname) &&\n        (() => {\n          const movieMatch = pathname.match(/^\\/([^/]+)\\/(\\d+)$/);\n          if (movieMatch) {\n            const categoryId = movieMatch[1];\n            const movieId = movieMatch[2];\n            return (\n              <MovieDetailsPage movieId={movieId} categoryId={categoryId} />\n            );\n          }\n          return null;\n        })()}\n      {![\"/\", \"/wishlist\", \"/logout\"].includes(pathname) &&\n        !/^\\/([^/]+)\\/(\\d+)$/.test(pathname) && <NotFoundPage />}\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n","import React, { StrictMode } from \"react\";\nimport App from \"./App.tsx\";\nimport { renderToString } from \"react-dom/server\";\nimport { BASE_URL } from './constants.ts';\n\nexport async function render(url: string) {\n  const pathname = new URL(url, BASE_URL).pathname;\n  let initialMovie = null;\n\n  const movieMatch = pathname.match(/^\\/([^/]+)\\/(\\d+)$/);\n  if (movieMatch) {\n    const movieId = movieMatch[2];\n    const res = await fetch(`${BASE_URL}/api/tmdb/movie/${movieId}`);\n    initialMovie = await res.json();\n  }\n\n  const html = renderToString(\n    <StrictMode>\n      <App initialUrl={url} initialMovie={initialMovie} />\n    </StrictMode>\n  );\n  return html;\n}\n"],"names":["addToWishlist","Error"],"mappings":"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"}