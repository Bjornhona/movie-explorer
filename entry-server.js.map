{"version":3,"file":"entry-server.js","sources":["../src/hooks/useMovies.ts","../src/components/MovieCard.tsx","../src/components/Loading.tsx","../src/components/MovieCarousel.tsx","../src/components/MoviesListPage.tsx","../src/components/MovieDetailsPage.tsx","../src/components/NotFoundPage.tsx","../src/hooks/useAuthentication.ts","../src/App.tsx","../src/entry-server.tsx"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { Movie } from '../types.ts';\n\ninterface MoviesResponse {\n  results: Movie[];\n  page: number;\n  total_pages: number;\n  total_results: number;\n}\n\nexport const useMovies = (category: string = 'upcoming') => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [page, setPage] = useState(1);\n  const [totalPages, setTotalPages] = useState<number | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchMovies = useCallback(async (pageToFetch = 1) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`/api/tmdb/movie/list?category=${category}&page=${pageToFetch}`);\n      if (!response.ok) throw new Error('Failed to fetch movies');\n      const data: MoviesResponse = await response.json();\n      setMovies(prev => {\n        if (pageToFetch === 1) return data.results;\n        const existingIds = new Set(prev.map(m => m.id));\n        const newUnique = data.results.filter(m => !existingIds.has(m.id));\n        return [...prev, ...newUnique];\n      });\n      setPage(pageToFetch);\n      setTotalPages(data.total_pages);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Unknown error');\n    } finally {\n      setLoading(false);\n    }\n  }, [category]);\n\n  // Initial load\n  useEffect(() => {\n    setMovies([]); // Reset movies when category changes\n    setPage(1);\n    setTotalPages(null);\n    fetchMovies(1);\n  }, [fetchMovies]);\n\n  const loadMore = () => {\n    const nextPage = page + 1;\n    if (totalPages && nextPage <= totalPages && !loading) {\n      fetchMovies(nextPage);\n    }\n  };\n\n  return { movies, loading, error, loadMore, hasMore: totalPages ? page < totalPages : true };\n}; ","import { MovieCardProps } from '../types.ts';\n\nconst MovieCard = ({movie, ref, onClick}: MovieCardProps) => {\n  const imageUrl = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n\n  return (\n    <div\n      data-testid={'movie-card'}\n      ref={ref}\n      style={{\n        flex: \"0 0 auto\",\n        scrollSnapAlign: \"start\",\n        minWidth: 150,\n        maxWidth: 150,\n      }}\n      onClick={() => onClick(movie.id)}\n    >\n      <img\n        src={imageUrl}\n        alt={movie.title}\n        style={{ width: \"150px\" }}\n      />\n    </div>\n  )\n}\n\nexport default MovieCard;\n","const Loading = () => {\n  return (\n    <div\n      style={{\n        minWidth: 220,\n        maxWidth: 220,\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      Loading more movies...\n    </div>\n  )\n}\n\nexport default Loading;\n","import { useRef, useCallback } from \"react\";\nimport { useMovies } from \"../hooks/useMovies.ts\";\nimport { Movie } from \"../types.ts\";\nimport MovieCard from \"./MovieCard.tsx\";\nimport Loading from \"./Loading.tsx\";\n\nconst MovieCarousel = ({\n  title,\n  category,\n}: {\n  title: string;\n  category: string;\n}) => {\n  const { movies, loading, error, loadMore, hasMore } = useMovies(category);\n  const observer = useRef<IntersectionObserver | null>(null);\n\n  // Attach observer to the last movie card (rightmost)\n  const lastMovieRef = useCallback(\n    (node: HTMLDivElement | null) => {\n      if (loading) return;\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver(\n        (entries) => {\n          if (entries[0].isIntersecting && hasMore && !loading) {\n            loadMore();\n          }\n        },\n        { root: null, rootMargin: \"0px\", threshold: 1.0 }\n      );\n      if (node) observer.current.observe(node);\n    },\n    [loading, hasMore, loadMore]\n  );\n\n  const handleCardClick = (movieId: number) => {\n    window.history.pushState({}, \"\", `/${movieId}`);\n    window.dispatchEvent(new PopStateEvent(\"popstate\"));\n  };\n\n  return (\n    <div data-testid={`carousel-${category}`} style={{ padding: 16 }}>\n      <h4>{title}</h4>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"row\",\n          overflowX: \"auto\",\n          gap: 16,\n          padding: \"16px 0\",\n          scrollSnapType: \"x mandatory\",\n          scrollbarWidth: \"none\",\n        }}\n      >\n        {movies.map((movie: Movie, idx: number) => {\n          const imageRef = idx === movies.length - 1 ? lastMovieRef : undefined;\n\n          return (\n            <MovieCard key={movie.id} movie={movie} ref={imageRef} onClick={handleCardClick} />\n          );\n        })}\n        {loading && movies.length > 0 && <Loading />}\n      </div>\n      {error && <div style={{ color: \"red\" }}>Error: {error}</div>}\n      {!hasMore && <div>No more movies.</div>}\n    </div>\n  );\n};\n\nexport default MovieCarousel;\n","import MovieCarousel from \"./MovieCarousel.tsx\";\n\nconst MoviesListPage = () => {\n  return (\n    <div style={{ padding: 16 }}>\n      <h2>Movies</h2>\n      <MovieCarousel title={\"Upcoming\"} category={\"upcoming\"} />\n      <MovieCarousel title={\"Popular\"} category={\"popular\"} />\n      <MovieCarousel title={\"Top Rated\"} category={\"top_rated\"} />\n    </div>\n  );\n};\n\nexport default MoviesListPage;\n","import { MovieDetailsProps } from '../types.ts';\n\nconst MovieDetailsPage = ({movieId, category}: MovieDetailsProps) => {\n  console.log(movieId);\n  console.log(category);\n  \n  return (\n    <>\n      <h1>Movie ID: {movieId}</h1>\n      <p>{category}</p>\n    </>\n  )\n}\n\nexport default MovieDetailsPage;\n","const NotFoundPage = () => {\n  return (\n    <h1>404 - Page Not Found</h1>\n  )\n}\n\nexport default NotFoundPage;\n","import { useState, useEffect } from 'react';\n\ninterface GuestSessionData {\n  success: boolean;\n  guest_session_id: string;\n  expires_at: string;\n}\n\nconst GUEST_SESSION_STORAGE_KEY = 'tmdb_guest_session';\n\nexport const useAuthentication = () => {\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [guestSessionId, setGuestSessionId] = useState<string | null>(null);\n\n  const isSessionExpired = (expiresAt: string): boolean => {\n    const expiryDate = new Date(expiresAt);\n    const now = new Date();\n    return now >= expiryDate;\n  };\n\n  const getStoredGuestSession = (): GuestSessionData | null => {\n    try {\n      const stored = localStorage.getItem(GUEST_SESSION_STORAGE_KEY);\n      return stored ? JSON.parse(stored) : null;\n    } catch {\n      return null;\n    }\n  };\n\n  const storeGuestSession = (data: GuestSessionData) => {\n    try {\n      localStorage.setItem(GUEST_SESSION_STORAGE_KEY, JSON.stringify(data));\n    } catch (error) {\n      console.error('Failed to store guest session:', error);\n    }\n  };\n\n  const doAuthentication = async (): Promise<boolean> => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Check if we already have a valid stored guest session\n      const storedSession = getStoredGuestSession();\n      if (storedSession && storedSession.success && !isSessionExpired(storedSession.expires_at)) {\n        console.log('Using existing guest session:', storedSession.guest_session_id);\n        setIsAuthenticated(true);\n        setGuestSessionId(storedSession.guest_session_id);\n        setLoading(false);\n        return true;\n      }\n\n      // Create new guest session\n      console.log('Creating new guest session...');\n      const response = await fetch('/api/tmdb/guest-session');\n      if (!response.ok) {\n        throw new Error('Failed to create guest session');\n      }\n\n      const data: GuestSessionData = await response.json();\n      console.log('Guest session response:', data);\n\n      if (data.success) {\n        storeGuestSession(data);\n        setIsAuthenticated(true);\n        setGuestSessionId(data.guest_session_id);\n        return true;\n      } else {\n        setIsAuthenticated(false);\n        setError('Failed to create guest session');\n        return false;\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error';\n      setError(errorMessage);\n      setIsAuthenticated(false);\n      console.error('Guest session error:', err);\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Run authentication on component mount\n  useEffect(() => {\n    doAuthentication();\n  }, []);\n\n  const clearGuestSession = () => {\n    try {\n      localStorage.removeItem(GUEST_SESSION_STORAGE_KEY);\n      setIsAuthenticated(false);\n      setGuestSessionId(null);\n    } catch (error) {\n      console.error('Failed to clear guest session:', error);\n    }\n  };\n\n  const refreshGuestSession = () => {\n    clearGuestSession();\n    return doAuthentication();\n  };\n\n  return {\n    isAuthenticated,\n    loading,\n    error,\n    guestSessionId,\n    doAuthentication,\n    clearGuestSession,\n    refreshGuestSession,\n  };\n}; ","import { useState, useEffect, FC } from \"react\";\nimport \"@/styles/App.scss\";\nimport \"@/styles/main.scss\";\nimport MoviesListPage from \"./components/MoviesListPage.tsx\";\nimport MovieDetailsPage from \"./components/MovieDetailsPage.tsx\";\nimport NotFoundPage from \"./components/NotFoundPage.tsx\";\nimport { useAuthentication } from \"./hooks/useAuthentication.ts\";\n\ninterface AppProps {\n  initialUrl: string;\n}\n\nconst App: FC<AppProps> = ({ initialUrl }) => {\n  const { loading, error } = useAuthentication();\n  const [url, setUrl] = useState(initialUrl);\n\n useEffect(() => {\n    const onPopState = () => {\n      const newUrl = window.location.pathname + window.location.search;\n      setUrl(newUrl);\n    }\n    window.addEventListener(\"popstate\", onPopState);\n    return () => window.removeEventListener(\"popstate\", onPopState);\n  }, [initialUrl]);\n\n  const pathname = new URL(url, \"http://localhost\").pathname;\n\n  if (loading) {\n    return <div>Setting up guest session...</div>;\n  }\n\n  if (error) {\n    return <div>Error: {error}</div>;\n  }\n\n  if (pathname === \"/\") return <MoviesListPage />;\n\n  const movieMatch = pathname.match(/^\\/(\\d+)$/);\n  if (movieMatch) {\n    return <MovieDetailsPage movieId={movieMatch[1]} />;\n  }\n\n  return <NotFoundPage />;\n};\n\nexport default App;\n","import React, { StrictMode } from \"react\";\nimport App from \"./App.tsx\";\nimport { renderToString } from \"react-dom/server\";\n\nexport function render(url: string) {\n  const html = renderToString(\n    <StrictMode>\n      <App initialUrl={url} />\n    </StrictMode>\n  );\n  return html;\n}\n"],"names":["error"],"mappings":"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"}